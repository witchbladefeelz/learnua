#!/bin/bash

echo "üá∫üá¶ –ó–∞–ø—É—Å–∫ Ukrainian Language Learning App..."

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
cd "$(dirname "$0")"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend
start_backend() {
    echo "üîß –ó–∞–ø—É—Å–∫ backend..."
    cd backend

    ensure_env_file
    ensure_dependencies
    ensure_postgres
    ensure_prisma

    echo "üöÄ –ó–∞–ø—É—Å–∫ NestJS —Å–µ—Ä–≤–µ—Ä–∞..."
    npm run start:dev
}

ensure_env_file() {
    if [ ! -f .env ]; then
        echo "üìÑ .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –∏–∑ env.example"
        cp env.example .env
    fi
}

ensure_dependencies() {
    if [ ! -d node_modules ]; then
        echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
        npm install --silent
    fi
}

ensure_postgres() {
    if ! command -v docker >/dev/null 2>&1; then
        echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ."
        exit 1
    fi

    local container_name="ualearn_db"

    if docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
        return
    fi

    if docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"; then
        echo "üìä –ó–∞–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL..."
        docker start "${container_name}" >/dev/null
    else
        echo "üìä –°–æ–∑–¥–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL..."
        docker run -d \
            --name "${container_name}" \
            -e POSTGRES_DB=ukrainian_app \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -p 5432:5432 \
            postgres:15 >/dev/null
    fi

    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ PostgreSQL..."
    until docker exec "${container_name}" pg_isready --quiet >/dev/null 2>&1; do
        sleep 1
    done
}

ensure_prisma() {
    echo "üóÇ  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã Prisma..."
    npx prisma generate >/dev/null
    npx prisma db push >/dev/null
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ frontend
start_frontend() {
    echo "üé® –ó–∞–ø—É—Å–∫ frontend..."
    cd frontend
    echo "üåê –ó–∞–ø—É—Å–∫ React —Å–µ—Ä–≤–µ—Ä–∞..."
    npm start
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
case "$1" in
    "backend")
        start_backend
        ;;
    "frontend")
        start_frontend
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
        echo "  $0 backend   # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ backend"
        echo "  $0 frontend  # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ frontend"
        echo ""
        echo "üöÄ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ 2 —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:"
        echo "   –¢–µ—Ä–º–∏–Ω–∞–ª 1: ./run-app.sh backend"
        echo "   –¢–µ—Ä–º–∏–Ω–∞–ª 2: ./run-app.sh frontend"
        echo ""
        echo "üìä –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –≤—Ä—É—á–Ω—É—é:"
        echo "   cd backend && npm run start:dev"
        echo "   cd frontend && npm start"
        ;;
esac
